model Libro {
  id Int @id @default(autoincrement())

  bibliotecaId String?
  inventarioId String  @unique

  titulo String

  anio Int
  isbn String?

  materias LibroMateria[]

  laboratorioId Int
  laboratorio   Laboratorio @relation(fields: [laboratorioId], references: [id], onDelete: Restrict)

  armarioId Int?
  armario   Armario? @relation(fields: [armarioId], references: [id], onDelete: Restrict)

  estanteId Int?
  estante   Estante? @relation(fields: [estanteId], references: [id], onDelete: Restrict)

  autorId Int
  autor   LibroAutor @relation(fields: [autorId], references: [id], onDelete: Restrict)

  idiomaId Int
  idioma   LibroIdioma @relation(fields: [idiomaId], references: [id], onDelete: Restrict)

  editorialId Int
  editorial   LibroEditorial @relation(fields: [editorialId], references: [id], onDelete: Restrict)

  sedeId Int
  sede   Sede @relation(fields: [sedeId], references: [id], onDelete: Cascade)

  disponible Boolean @default(true)

  reservas ReservaLibro[]

  fechaCreacion        DateTime @default(now())
  fechaModificacion    DateTime @default(now()) @updatedAt
  usuarioCreadorId     String
  usuarioModificadorId String

  @@index([titulo(sort: Asc)])
  @@index([anio(sort: Desc)])
  @@index([bibliotecaId])
  @@index([inventarioId])
}

model LibroMateria {
  libroId   Int
  materiaId Int

  libro   Libro   @relation(fields: [libroId], references: [id], onDelete: Cascade)
  materia Materia @relation(fields: [materiaId], references: [id], onDelete: Cascade)

  fechaCreacion    DateTime @default(now())
  usuarioCreadorId String

  @@id([libroId, materiaId])
}

model LibroAutor {
  id Int @id @default(autoincrement())

  autorNombre String @unique

  libros Libro[]

  fechaCreacion    DateTime @default(now())
  usuarioCreadorId String

  @@index([autorNombre(sort: Asc)])
}

model LibroIdioma {
  id Int @id @default(autoincrement())

  idioma String @unique

  libros Libro[]

  fechaCreacion    DateTime @default(now())
  usuarioCreadorId String

  @@index([idioma(sort: Asc)])
}

model LibroEditorial {
  id Int @id @default(autoincrement())

  editorial String @unique

  libros Libro[]

  fechaCreacion    DateTime @default(now())
  usuarioCreadorId String

  @@index([editorial(sort: Asc)])
}

model Curso {
  id Int @id @default(autoincrement())

  horaInicio1 String
  duracion1   String
  horaInicio2 String?
  duracion2   String?

  dia1 CursoDia
  dia2 CursoDia?

  ayudantes  CursoAyudante[]
  profesorId String
  profesor   User            @relation(fields: [profesorId], references: [id], onDelete: Cascade)

  anioDeCarrera Int
  activo        Boolean
  ac            String

  sedeId Int
  sede   Sede @relation(fields: [sedeId], references: [id], onDelete: Cascade)

  materiaId Int
  materia   Materia @relation(fields: [materiaId], references: [id], onDelete: Cascade)

  divisionId Int
  division   Division @relation(fields: [divisionId], references: [id], onDelete: Cascade)

  turno TurnoCurso

  reservaLaboratorioCerrado ReservaLaboratorioCerrado[]

  fechaCreacion        DateTime @default(now())
  fechaModificacion    DateTime @default(now()) @updatedAt
  usuarioCreadorId     String
  usuarioModificadorId String

  @@index([anioDeCarrera(sort: Asc)])
  @@index([activo], type: Hash)
  @@index([turno], type: Hash)
}

model CursoAyudante {
  cursoId Int
  userId  String

  curso   Curso @relation(fields: [cursoId], references: [id], onDelete: Cascade)
  usuario User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  fechaCreacion    DateTime @default(now())
  usuarioCreadorId String

  fechaModificacion    DateTime @default(now()) @updatedAt
  usuarioModificadorId String

  @@id([cursoId, userId])
}

model Division {
  id Int @id @default(autoincrement())

  nombre String @unique
  anio   Int

  fechaCreacion    DateTime @default(now())
  usuarioCreadorId String

  fechaModificacion    DateTime @default(now()) @updatedAt
  usuarioModificadorId String

  cursos Curso[]

  @@index([anio(sort: Asc)])
  @@index([nombre(sort: Asc)])
}

enum TurnoCurso {
  MANANA
  TARDE
  NOCHE
}

enum CursoDia {
  LUNES
  MARTES
  MIERCOLES
  JUEVES
  VIERNES
  SABADO
  DOMINGO
}

model Equipo {
  id Int @id @default(autoincrement())

  inventarioId String @unique

  modelo        String?
  numeroSerie   String?
  observaciones String?
  palabrasClave String?
  imagen        String?

  tipoId Int
  tipo   EquipoTipo @relation(fields: [tipoId], references: [id], onDelete: Restrict)

  marcaId Int
  marca   EquipoMarca @relation(fields: [marcaId], references: [id], onDelete: Restrict)

  sedeId Int
  sede   Sede @relation(fields: [sedeId], references: [id], onDelete: Cascade)

  laboratorioId Int
  laboratorio   Laboratorio @relation(fields: [laboratorioId], references: [id], onDelete: Restrict)

  armarioId Int?
  armario   Armario? @relation(fields: [armarioId], references: [id], onDelete: Restrict)

  estanteId Int?
  estante   Estante? @relation(fields: [estanteId], references: [id], onDelete: Restrict)

  estadoId Int
  estado   EquipoEstado @relation(fields: [estadoId], references: [id], onDelete: Restrict)

  disponible Boolean @default(true)

  reservas ReservaEquipo[]

  fechaCreacion        DateTime @default(now())
  fechaModificacion    DateTime @default(now()) @updatedAt
  usuarioCreadorId     String
  usuarioModificadorId String

  @@index([modelo(sort: Asc)])
  @@index([numeroSerie(sort: Asc)])
}

model EquipoMarca {
  id Int @id @default(autoincrement())

  nombre String

  fechaCreacion    DateTime @default(now())
  usuarioCreadorId String

  equipos Equipo[]

  @@index([nombre(sort: Asc)])
}

model EquipoTipo {
  id Int @id @default(autoincrement())

  nombre String
  imagen String?

  fechaCreacion    DateTime @default(now())
  usuarioCreadorId String

  equipos Equipo[]

  reservaLaboratorioCerradoEquipo ReservaLaboratorioCerradoEquipo[]
  reservaLaboratorioAbiertoEquipo ReservaLaboratorioAbiertoEquipo[]

  @@index([nombre(sort: Asc)])
}

model EquipoEstado {
  id Int @id @default(autoincrement())

  nombre String

  fechaCreacion    DateTime @default(now())
  usuarioCreadorId String

  equipos Equipo[]

  @@index([nombre(sort: Asc)])
}

model Laboratorio {
  id Int @id @default(autoincrement())

  nombre  String
  tienePc Boolean @default(false)

  esReservable     Boolean @default(false)
  incluirEnReporte Boolean @default(false)

  sedeId Int
  sede   Sede @relation(fields: [sedeId], references: [id], onDelete: Cascade)

  software SoftwareLaboratorio[]

  armarios Armario[]
  equipos  Equipo[]
  libros   Libro[]

  reservaLaboratorioCerrado ReservaLaboratorioCerrado[]
  reservaLaboratorioAbierto ReservaLaboratorioAbierto[]

  fechaCreacion        DateTime @default(now())
  fechaModificacion    DateTime @default(now()) @updatedAt
  usuarioCreadorId     String
  usuarioModificadorId String

  @@index([nombre(sort: Asc)])
  @@index([tienePc], type: Hash)
  @@index([esReservable], type: Hash)
}

model Armario {
  id Int @id @default(autoincrement())

  nombre String

  laboratorioId Int
  laboratorio   Laboratorio @relation(fields: [laboratorioId], references: [id], onDelete: Cascade)

  estantes Estante[]
  equipos  Equipo[]
  libros   Libro[]

  fechaCreacion        DateTime @default(now())
  fechaModificacion    DateTime @default(now()) @updatedAt
  usuarioCreadorId     String
  usuarioModificadorId String
}

model Estante {
  id Int @id @default(autoincrement())

  nombre String

  armarioId Int
  armario   Armario @relation(fields: [armarioId], references: [id], onDelete: Cascade)

  equipos Equipo[]
  libros  Libro[]

  fechaCreacion        DateTime @default(now())
  fechaModificacion    DateTime @default(now()) @updatedAt
  usuarioCreadorId     String
  usuarioModificadorId String
}

model Software {
  id Int @id @default(autoincrement())

  nombre String

  version String

  estado String

  windows Boolean @default(true)
  linux   Boolean @default(false)

  laboratorios SoftwareLaboratorio[]

  fechaCreacion        DateTime @default(now())
  fechaModificacion    DateTime @default(now()) @updatedAt
  usuarioCreadorId     String
  usuarioModificadorId String
}

model SoftwareLaboratorio {
  softwareId    Int
  laboratorioId Int

  software    Software    @relation(fields: [softwareId], references: [id], onDelete: Cascade)
  laboratorio Laboratorio @relation(fields: [laboratorioId], references: [id], onDelete: Cascade)

  fechaCreacion    DateTime @default(now())
  usuarioCreadorId String

  @@id([softwareId, laboratorioId])
}

model Mails {
  id Int @unique @default(autoincrement())

  emisor    String
  para      String
  cc        String
  cco       String
  contenido Json
  asunto    String

  fechaEnvio DateTime @default(now())
}

model Materia {
  id Int @id @default(autoincrement())

  nombre   String
  codigo   String          @unique
  anio     Int
  duracion MateriaDuracion
  tipo     MateriaTipo

  directorUsuarioId String?
  directorUsuario   User?   @relation(fields: [directorUsuarioId], references: [id], name: "materiasDirector")

  jefeTrabajoPracticos      MateriaJefeTp[]
  cursos                    Curso[]
  libros                    LibroMateria[]
  materiaPrerequisito       MateriaCorrelativa[]        @relation(name: "materiaPrerequisito")
  correlativa               MateriaCorrelativa[]        @relation(name: "correlativa")
  reservaLaboratorioCerrado ReservaLaboratorioCerrado[]

  fechaCreacion        DateTime @default(now())
  fechaModificacion    DateTime @default(now()) @updatedAt
  usuarioCreadorId     String
  usuarioModificadorId String

  @@index([nombre(sort: Asc)])
  @@index([anio(sort: Asc)])
  @@index([duracion])
  @@index([tipo])
}

model MateriaJefeTp {
  materiaId Int
  userId    String @map("jefeTrabajoPracticoUsuarioId")

  materia Materia @relation(fields: [materiaId], references: [id], onDelete: Cascade)
  usuario User    @relation(fields: [userId], references: [id], onDelete: Cascade, name: "materiasJefeTrabajoPractico")

  @@id([materiaId, userId])
}

model MateriaCorrelativa {
  materiaPrerequisitoId Int
  correlativaId         Int

  estatusCorrelativa EstatusCorrelativa

  materiaPrerequisito Materia @relation("materiaPrerequisito", fields: [materiaPrerequisitoId], references: [id], onDelete: Cascade)
  correlativa         Materia @relation("correlativa", fields: [correlativaId], references: [id], onDelete: Cascade)

  fechaCreacion        DateTime @default(now())
  fechaModificacion    DateTime @default(now()) @updatedAt
  usuarioCreadorId     String
  usuarioModificadorId String

  @@id([estatusCorrelativa, materiaPrerequisitoId, correlativaId])
}

enum MateriaDuracion {
  ANUAL
  CUATRIMESTRAL
  AMBOS
}

enum MateriaTipo {
  INTEGRADORA
  OBLIGATORIA
  ELECTIVA
}

enum EstatusCorrelativa {
  CURSAR_REGULARIZADA
  CURSAR_APROBADA
  RENDIR_APROBADA
}

enum SgeNombre {
  ADMIN_QUERY
  ADMIN_MODIFICAR_ATRIBUTOS
  ADMIN_MODIFICAR_ATRIBUTOS_ADMIN
  ADMIN_VER_PANEL_ADMIN
  ADMIN_ABM_USUARIOS
  ADMIN_ES_ALUMNO
  ADMIN_ES_DOCENTE
  ADMIN_ACCESO_SVN
  ADMIN_ES_TUTOR
  ADMIN_ES_PANOL
  ADMIN_ES_CONSEJERO
  ADMIN_ES_ADMINISTRADOR_WEB
  ADMIN_ACTUALIZAR_ACTA_CONSEJEROS
  ADMIN_VER_RESULTADOS_ACTA
  ADMIN_VER_NOTIFICACIONES_INDEX
  ADMIN_VER_FICHA_USUARIO
  ADMIN_AGREGAR_USUARIOS_A_GRUPOS
  ADMIN_OFERTAS_LABORALES_ABM
  RES_LAB_RESERVAR_CURSO_AUTO
  RES_LAB_VER_RESERVAS_CURSO_AUTO
  RES_LAB_REALIZAR_RESERVA_DISCRECIONAL
  RES_LAB_CONFIRMAR_RESERVAS
  RES_LAB_VER_TODO_RESERVAS
  RES_LAB_VER_RESERVAS_GENERALES_DOCENTES
  RES_LAB_RESERVAR_CATEDRA_AUTO
  RES_LAB_VER_RESERVAS_CATEDRA
  RES_LAB_ABM_PANTALLA
  APLICACIONES_VER_LISTADO
  APLICACIONES_ABM
  LABORATORIOS_ABM
  APLICACIONES_CARGAR_PRACTICA_AUTO
  LAB_ABIERTO_RESERVAR
  LAB_ABIERTO_VER_MIS_RESERVAS
  LAB_ABIERTO_VER_PLANILLA_TUTORES
  LAB_ABIERTO_CONFIRMAR_RESERVAS
  LAB_ABIERTO_SUSPENDER_ALUMNO
  LAB_ABIERTO_DESSUSPENDER_ALUMNO
  LAB_ABIERTO_TUTORES_ABM
  MATERIAS_ABM
  MATERIAS_VER_LISTADO
  MATERIAS_ADMINISTRAR_CORRELATIVA
  CURSOS_MOSTRAR_TODOS
  CURSOS_ABM
  CURSOS_VER_MIS_CURSOS_AUTO
  DIVISIONES_ABM
  DIVISIONES_VER_LISTADO
  ARMARIOS_ABM
  ESTANTES_ABM
  EQUIPOS_ABM
  EQUIPOS_VER_LISTADO
  EQUIPOS_BUSCAR_EQUIPO
  EQUIPOS_REPORTE_ARMARIO
  EQUIPOS_REPORTE_TIPO
  EQUIPOS_ADMIN_VER_UBICACION
  EQUIPOS_REPORTE_LABORATORIO
  EQUIPOS_ABM_MANUALES
  EQUIPOS_PRESTAMO_PRESTAR
  EQUIPOS_PRESTAMO_VER_PRESTAMOS
  EQUIPOS_PRESTAMO_VER_MIS_PRESTAMOS
  EQUIPOS_TIPO_ABM
  BIBLIOTECA_ABM_LIBRO
  BIBLIOTECA_VER_LISTADO
  BIBLIOTECA_BUSCAR_LIBRO
  BIBLIOTECA_VER_DETALLES_LIBRO
  BIBLIOTECA_EDITORIALES_ABM
  BIBLIOTECA_PRESTAMO_PRESTAR
  BIBLIOTECA_PRESTAMO_VER_PRESTAMOS
  BIBLIOTECA_PRESTAMO_VER_MIS_PRESTAMOS
  CONV_ELECTROCOMPONENTES_REQUERIR_CERTIFICADO
  CONV_ELECTROCOMPONENTES_VER_DETALLES
  CONV_ELECTROCOMPONENTES_ADMIN_CERTIFICADOS
  CONV_ELECTROCOMPONENTES_ELIMINAR_CERTIFICADO
  CONV_MAYER_REQUERIR_CERTIFICADO
  CONV_MAYER_VER_MIS_PEDIDOS
  CONV_MAYER_ENVIAR_RESUMEN
  CONV_MAYER_ADMIN_PEDIDOS
  REP_FALLAS_BUSCAR_REP_FALLAS
  REP_FALLAS_REPORTAR_FALLAS
  REP_FALLAS_ADMIN_REP_FALLAS
  ACTIVIDADES_USUARIO_SGE_PUBLICAR_ADMIN
  ACTIVIDADES_USUARIO_SGE_VER_PUBLICACIONES
  ACTIVIDADES_ABIERTAS_PUBLICAR_ADMIN
  ACTIVIDADES_ABIERTAS_VER_PUBLICACIONES
}

model Reserva {
  id Int @id @default(autoincrement())

  estatus         ReservaEstatus
  fechaHoraInicio DateTime
  fechaHoraFin    DateTime
  tipo            ReservaTipo
  asistio         Boolean        @default(true)

  motivoRechazo String?

  // Usuario que hace la reserva
  usuarioSolicitoId String
  usuarioSolicito   User   @relation(fields: [usuarioSolicitoId], references: [id], name: "reservasSolicitadas", onDelete: Restrict)

  // Usuario que aprueba la reserva
  usuarioAprobadorId String?
  usuarioAprobador   User?   @relation(fields: [usuarioAprobadorId], references: [id], name: "reservasAprobadas", onDelete: Restrict)

  // Usuario que rechaza la reserva
  usuarioRechazadoId String?
  usuarioRechazado   User?   @relation(fields: [usuarioRechazadoId], references: [id], name: "reservasRechazadas", onDelete: Restrict)

  // Usuario que solicita renovar la reserva
  usuarioRenovoId String?
  usuarioRenovo   User?   @relation(fields: [usuarioRenovoId], references: [id], name: "reservasRenovadas", onDelete: Restrict)

  // Usuario que marca la reserva como terminada
  usuarioRecibioId String?
  usuarioRecibio   User?   @relation(fields: [usuarioRecibioId], references: [id], name: "reservasRecibidas", onDelete: Restrict)

  // Tutor de la reserva (solo aplicable a reserva de laboratorio abierto)
  usuarioTutorId String?
  usuarioTutor   User?   @relation(fields: [usuarioTutorId], references: [id], name: "reservaTutor", onDelete: Restrict)

  reservaEquipo             ReservaEquipo?
  reservaLibro              ReservaLibro?
  reservaLaboratorioCerrado ReservaLaboratorioCerrado?
  reservaLaboratorioAbierto ReservaLaboratorioAbierto?

  fechaRenovacion DateTime?
  fechaAprobacion DateTime?
  fechaRechazo    DateTime?
  fechaRecibido   DateTime?

  // Auditorias
  usuarioCreadorId     String
  usuarioModificadorId String
  fechaCreacion        DateTime @default(now())
  fechaModificacion    DateTime @updatedAt

  mostrarEnPantalla Boolean @default(true)

  @@index([tipo], type: Hash)
  @@index([estatus], type: Hash)
  @@index([usuarioSolicitoId], type: Hash)
  @@index([fechaHoraInicio(sort: Asc)], type: BTree)
  @@index([fechaHoraFin(sort: Asc)], type: BTree)
}

model ReservaEquipo {
  id Int @id @default(autoincrement())

  fechaEntregado DateTime

  reservaId Int     @unique
  reserva   Reserva @relation(fields: [reservaId], references: [id], onDelete: Cascade)

  equipoId Int
  equipo   Equipo @relation(fields: [equipoId], references: [id], onDelete: Cascade)

  fechaCreacion        DateTime @default(now())
  fechaModificacion    DateTime @default(now()) @updatedAt
  usuarioCreadorId     String
  usuarioModificadorId String

  @@index([fechaEntregado(sort: Asc)])
}

model ReservaLibro {
  id Int @id @default(autoincrement())

  fechaEntregado DateTime

  reservaId Int     @unique
  reserva   Reserva @relation(fields: [reservaId], references: [id], onDelete: Cascade)

  libroId Int
  libro   Libro @relation(fields: [libroId], references: [id], onDelete: Cascade)

  fechaCreacion        DateTime @default(now())
  fechaModificacion    DateTime @default(now()) @updatedAt
  usuarioCreadorId     String
  usuarioModificadorId String

  @@index([fechaEntregado(sort: Asc)])
}

model ReservaLaboratorioCerrado {
  id Int @id @default(autoincrement())

  descripcion       String  @default("")
  requierePC        Boolean @default(false)
  requiereProyector Boolean @default(false)

  reservaId Int     @unique
  reserva   Reserva @relation(fields: [reservaId], references: [id], onDelete: Cascade)

  sedeId Int
  sede   Sede @relation(fields: [sedeId], references: [id], onDelete: Cascade)

  laboratorioId Int?
  laboratorio   Laboratorio? @relation(fields: [laboratorioId], references: [id], onDelete: Cascade)

  cursoId Int?
  curso   Curso? @relation(fields: [cursoId], references: [id], onDelete: Cascade)

  esDiscrecional        Boolean  @default(false)
  discrecionalTitulo    String   @default("")
  discrecionalMateriaId Int?
  discrecionalMateria   Materia? @relation(fields: [discrecionalMateriaId], references: [id], onDelete: Cascade)
  discrecionalDocenteId String?
  discrecionalDocente   User?    @relation(fields: [discrecionalDocenteId], references: [id], name: "reservasLaboratorioCerrado")

  equipoReservado ReservaLaboratorioCerradoEquipo[]

  fechaCreacion        DateTime @default(now())
  fechaModificacion    DateTime @default(now()) @updatedAt
  usuarioCreadorId     String
  usuarioModificadorId String
}

model ReservaLaboratorioCerradoEquipo {
  id Int @id @default(autoincrement())

  cantidad Int

  reservaLaboratorioCerradoId Int
  reservaLaboratorioCerrado   ReservaLaboratorioCerrado @relation(fields: [reservaLaboratorioCerradoId], references: [id], onDelete: Cascade)

  equipoId   Int
  equipoTipo EquipoTipo @relation(fields: [equipoId], references: [id], onDelete: Cascade)

  fechaCreacion        DateTime @default(now())
  fechaModificacion    DateTime @default(now()) @updatedAt
  usuarioCreadorId     String
  usuarioModificadorId String
}

model ReservaLaboratorioAbierto {
  id Int @id @default(autoincrement())

  especialidad           String
  descripcion            String                 @default("")
  concurrentes           Int
  laboratorioAbiertoTipo LaboratorioAbiertoTipo

  reservaId Int     @unique
  reserva   Reserva @relation(fields: [reservaId], references: [id], onDelete: Cascade)

  sedeId Int
  sede   Sede @relation(fields: [sedeId], references: [id], onDelete: Cascade)

  laboratorioId Int?
  laboratorio   Laboratorio? @relation(fields: [laboratorioId], references: [id], onDelete: Cascade)

  equipoReservado ReservaLaboratorioAbiertoEquipo[]

  fechaCreacion        DateTime @default(now())
  fechaModificacion    DateTime @default(now()) @updatedAt
  usuarioCreadorId     String
  usuarioModificadorId String

  @@index([especialidad(sort: Asc)])
}

model ReservaLaboratorioAbiertoEquipo {
  id Int @id @default(autoincrement())

  cantidad Int

  reservaLaboratorioAbiertoId Int
  reservaLaboratorioAbierto   ReservaLaboratorioAbierto @relation(fields: [reservaLaboratorioAbiertoId], references: [id], onDelete: Cascade)

  equipoId   Int
  equipoTipo EquipoTipo @relation(fields: [equipoId], references: [id], onDelete: Cascade)

  fechaCreacion        DateTime @default(now())
  fechaModificacion    DateTime @default(now()) @updatedAt
  usuarioCreadorId     String
  usuarioModificadorId String
}

model Pantalla {
  id Int @id @default(autoincrement())

  sedeId Int
  sede   Sede @relation(fields: [sedeId], references: [id], onDelete: Cascade)

  docente         String
  materia         String?
  laboratorio     String?
  fechaHoraInicio DateTime
  fechaHoraFin    DateTime

  usuarioCreadorId String
  fechaCreacion    DateTime @default(now())
}

enum ReservaEstatus {
  PENDIENTE // Cuando el usuario creo y esta pendiente de aprobación
  FINALIZADA // Cuando el usuario devuelve el equipo o libro / Cuando se aprueba la reserva de laboratorio
  CANCELADA // Cuando el usuario que creo la reserva cancela la reserva (solo aplica a laboratorios abierto/cerrado no a equipo/bibioteca)
  RECHAZADA // Cuando el administrador rechaza la reserva
}

// Reservas de EQUIPO o LIBRO
// 1. PENDIENTE => El usuario ya posee el equipo o libro y lo tiene que devolver en el futuro
// 2. FINALIZADA => El usuario ya devolvió el equipo o libro

// Reservas de LABORATORIO ABIERTO o CERRADO
// 1. PENDIENTE => El usuario creó una solicitud de reserva de laboratorio abierto o cerrado
// 2. FINALIZADA => El administador aprueba la reserva
// 3. CANCELADA => El usuario que creó la reserva cancela la reserva (no puede volver a modificar)
// 4. RECHAZADA => El administrador rechaza la reserva (el usuario creador puede modificarla y volver a pendiente)

enum ReservaTipo {
  LABORATORIO_ABIERTO
  LABORATORIO_CERRADO
  INVENTARIO
  LIBRO
}

enum LaboratorioAbiertoTipo {
  LA
  TLA_BASICA
  TLA
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
  output          = "../src/generated/prisma"
  binaryTargets   = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

// Las propiedades y tablas que estan escritas en ingles, se utilizan por el adapter de NextAuth para el login. No cambiar el nombre de las propiedades.
// Todas las propiedades que no esten en ingles, deben tener algun valor por defecto o aceptar nulo.
// https://authjs.dev/getting-started/adapters/prisma#naming-conventions
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  refresh_expires_in       Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Sede {
  id Int @id @default(autoincrement())

  nombre String @unique

  cursos                    Curso[]
  equipos                   Equipo[]
  laboratorios              Laboratorio[]
  libros                    Libro[]
  ReservaLaboratorioAbierto ReservaLaboratorioAbierto[]
  ReservaLaboratorioCerrado ReservaLaboratorioCerrado[]
  Pantalla                  Pantalla[]
}

// Las propiedades y tablas  que estan escritas en ingles, se utilizan por el adapter de NextAuth para el login. No cambiar el nombre de las propiedades.
// Todas las propiedades que no esten en ingles, deben tener algun valor por defecto o aceptar nulo.
// https://authjs.dev/getting-started/adapters/prisma#naming-conventions
model User {
  id            String   @id @default(cuid())
  name          String   @unique
  email         String   @unique
  emailVerified Boolean?
  image         String   @default("/default-avatar.svg")

  nombre          String?
  apellido        String?
  fechaNacimiento DateTime? @db.Date
  direccion       String?
  piso            String?
  departamento    String?
  ciudad          String?
  codigoPostal    String?
  telefonoCasa    String?
  telefonoCelular String?
  telefonoLaboral String?
  documentoNumero String?
  legajo          String?
  gitlab          String?
  penalizaciones  Int       @default(0)
  esDocente       Boolean   @default(false)
  esTutor         Boolean   @default(false)

  fechaRegistro            DateTime @default(now())
  fechaUltimoAcceso        DateTime @default(now())
  fechaUltimaActualizacion DateTime @default(now()) @updatedAt

  documentoTipoId Int?
  documentoTipo   DocumentoTipo? @relation(fields: [documentoTipoId], references: [id], onDelete: Restrict)

  provinciaIso String?
  provincia    Provincia? @relation(fields: [provinciaIso, paisIso], references: [iso, paisIso], onDelete: Restrict)

  paisIso String?
  pais    Pais?   @relation(fields: [paisIso], references: [iso], onDelete: Restrict)

  accounts   Account[]
  sessions   Session[]
  usuarioRol UsuarioRol[]

  reservasSolicitadas Reserva[] @relation(name: "reservasSolicitadas")
  reservasRenovadas   Reserva[] @relation(name: "reservasRenovadas")
  reservasComoTutor   Reserva[] @relation(name: "reservaTutor")
  reservasAprobadas   Reserva[] @relation(name: "reservasAprobadas")
  reservasRechazadas  Reserva[] @relation(name: "reservasRechazadas")
  reservasRecibidas   Reserva[] @relation(name: "reservasRecibidas")

  cursosComoAyudante CursoAyudante[]
  cursosComoProfesor Curso[]

  MateriaJefeTp             MateriaJefeTp[]             @relation(name: "materiasJefeTrabajoPractico")
  materiasDirector          Materia[]                   @relation(name: "materiasDirector")
  tutor                     Tutor? // 1 tutor por 1 usuario maximo
  ReservaLaboratorioCerrado ReservaLaboratorioCerrado[] @relation(name: "reservasLaboratorioCerrado")

  @@unique([legajo(sort: Asc)], map: "usuario_legajo_asc_idx")
  @@index([name(sort: Asc)])
  @@index([apellido(sort: Asc)])
  @@index([email(sort: Asc)])
  @@index([legajo], type: Hash, map: "usuario_legajo_hash_idx")
}

model Tutor {
  userId  String @unique
  usuario User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  diasHorarios String
  activo       Boolean

  especialidad String

  fechaCreacion    DateTime @default(now())
  usuarioCreadorId String

  @@id([userId])
  @@index([especialidad])
}

model UsuarioRol {
  userId  String
  usuario User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  rolId Int
  rol   Rol @relation(fields: [rolId], references: [id], onDelete: Cascade)

  fechaCreacion    DateTime @default(now())
  usuarioCreadorId String

  @@id([userId, rolId])
}

model Rol {
  id Int @id @default(autoincrement())

  nombre String @unique

  usuarios   UsuarioRol[]
  rolPermiso RolPermiso[]

  fechaCreacion        DateTime @default(now())
  fechaModificacion    DateTime @default(now()) @updatedAt
  usuarioCreadorId     String
  usuarioModificadorId String

  @@index([nombre(sort: Asc)])
}

model RolPermiso {
  rolId Int
  rol   Rol @relation(fields: [rolId], references: [id], onDelete: Cascade)

  permisoId Int
  permiso   Permiso @relation(fields: [permisoId], references: [id], onDelete: Cascade)

  fechaCreacion    DateTime @default(now())
  usuarioCreadorId String

  @@id([rolId, permisoId])
}

model Permiso {
  id Int @id @default(autoincrement())

  sgeNombre SgeNombre
  nombre    String
  rubro     String
  incluido  Boolean   @default(true)

  rolPermiso RolPermiso[]

  fechaCreacion        DateTime @default(now())
  fechaModificacion    DateTime @default(now()) @updatedAt
  usuarioCreadorId     String
  usuarioModificadorId String

  @@unique([nombre, rubro])
  @@unique([sgeNombre])
  @@index([nombre(sort: Asc)])
  @@index([sgeNombre])
}

model Provincia {
  iso    String
  nombre String

  paisIso String
  pais    Pais   @relation(fields: [paisIso], references: [iso], onDelete: Cascade)

  usuarios User[]

  @@id([iso, paisIso])
  @@index([nombre])
}

model Pais {
  iso            String @id
  nombreEspanol  String
  nombreIngles   String
  iso3           String
  codigoNumerico Int

  usuarios   User[]
  provincias Provincia[]

  @@index([nombreEspanol(sort: Asc)])
  @@index([iso3])
  @@index([codigoNumerico])
}

model DocumentoTipo {
  id Int @id @default(autoincrement())

  nombre String

  usuarios User[]
}
