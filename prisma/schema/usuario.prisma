// Las propiedades y tablas  que estan escritas en ingles, se utilizan por el adapter de NextAuth para el login. No cambiar el nombre de las propiedades.
// Todas las propiedades que no esten en ingles, deben tener algun valor por defecto o aceptar nulo.
// https://authjs.dev/getting-started/adapters/prisma#naming-conventions
model User {
    id            String   @id @default(cuid())
    name          String // Viene con la cuenta
    email         String   @unique
    emailVerified Boolean?
    image         String   @default("/default-avatar.svg")

    nombre          String?
    apellido        String?
    fechaNacimiento DateTime? @db.Date
    direccion       String?
    piso            String?
    departamento    String?
    ciudad          String?
    codigoPostal    String?
    telefonoCasa    String?
    telefonoCelular String?
    telefonoLaboral String?
    documentoNumero String?
    legajo          String?
    gitlab          String?
    penalizaciones  Int       @default(0)
    esDocente       Boolean   @default(false)
    esTutor         Boolean   @default(false)

    fechaRegistro            DateTime @default(now())
    fechaUltimoAcceso        DateTime @default(now())
    fechaUltimaActualizacion DateTime @default(now()) @updatedAt

    documentoTipoId Int?
    documentoTipo   DocumentoTipo? @relation(fields: [documentoTipoId], references: [id], onDelete: Restrict)

    provinciaIso String?
    provincia    Provincia? @relation(fields: [provinciaIso, paisIso], references: [iso, paisIso], onDelete: Restrict)

    paisIso String?
    pais    Pais?   @relation(fields: [paisIso], references: [iso], onDelete: Restrict)

    accounts   Account[]
    sessions   Session[]
    usuarioRol UsuarioRol[]

    reservasSolicitadas Reserva[] @relation(name: "reservasSolicitadas")
    reservasRenovadas   Reserva[] @relation(name: "reservasRenovadas")
    reservasComoTutor   Reserva[] @relation(name: "reservaTutor")
    reservasAprobadas   Reserva[] @relation(name: "reservasAprobadas")
    reservasRechazadas  Reserva[] @relation(name: "reservasRechazadas")
    reservasRecibidas   Reserva[] @relation(name: "reservasRecibidas")

    cursosComoAyudante CursoAyudante[]
    cursosComoProfesor Curso[]

    MateriaJefeTp    MateriaJefeTp[] @relation(name: "materiasJefeTrabajoPractico")
    materiasDirector Materia[]       @relation(name: "materiasDirector")
    tutor            Tutor? // 1 tutor por 1 usuario maximo

    @@unique([legajo(sort: Asc)], map: "usuario_legajo_asc_idx")
    @@index([name(sort: Asc)])
    @@index([apellido(sort: Asc)])
    @@index([email(sort: Asc)])
    @@index([legajo], type: Hash, map: "usuario_legajo_hash_idx")
}

model Tutor {
    userId  String @unique
    usuario User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    diasHorarios String
    sede         String?
    activo       Boolean

    especialidad String

    fechaCreacion    DateTime @default(now())
    usuarioCreadorId String

    @@id([userId])
    @@index([especialidad])
}

model UsuarioRol {
    userId  String
    usuario User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    rolId Int
    rol   Rol @relation(fields: [rolId], references: [id], onDelete: Cascade)

    fechaCreacion    DateTime @default(now())
    usuarioCreadorId String

    @@id([userId, rolId])
}

model Rol {
    id Int @id @default(autoincrement())

    nombre String @unique

    usuarios   UsuarioRol[]
    rolPermiso RolPermiso[]

    fechaCreacion        DateTime @default(now())
    fechaModificacion    DateTime @default(now()) @updatedAt
    usuarioCreadorId     String
    usuarioModificadorId String

    @@index([nombre(sort: Asc)])
}

model RolPermiso {
    rolId Int
    rol   Rol @relation(fields: [rolId], references: [id], onDelete: Cascade)

    permisoId Int
    permiso   Permiso @relation(fields: [permisoId], references: [id], onDelete: Cascade)

    fechaCreacion    DateTime @default(now())
    usuarioCreadorId String

    @@id([rolId, permisoId])
}

model Permiso {
    id Int @id @default(autoincrement())

    nombre   String
    grupo    String
    enDesuso Boolean @default(false)

    rolPermiso RolPermiso[]

    fechaCreacion        DateTime @default(now())
    fechaModificacion    DateTime @default(now()) @updatedAt
    usuarioCreadorId     String
    usuarioModificadorId String

    @@unique([nombre, grupo])
    @@index([nombre(sort: Asc)])
}

model Provincia {
    iso    String
    nombre String

    paisIso String
    pais    Pais   @relation(fields: [paisIso], references: [iso], onDelete: Cascade)

    usuarios User[]

    @@id([iso, paisIso])
    @@index([nombre])
}

model Pais {
    iso            String @id
    nombreEspanol  String
    nombreIngles   String
    iso3           String
    codigoNumerico Int

    usuarios   User[]
    provincias Provincia[]

    @@index([nombreEspanol(sort: Asc)])
    @@index([iso3])
    @@index([codigoNumerico])
}

model DocumentoTipo {
    id Int @id @default(autoincrement())

    nombre String

    usuarios User[]
}
